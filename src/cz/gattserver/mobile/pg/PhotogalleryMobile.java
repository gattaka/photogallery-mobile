package cz.gattserver.mobile.pg;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Map;

import com.codename1.components.ImageViewer;
import com.codename1.components.InfiniteProgress;
import com.codename1.components.SpanLabel;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.NetworkManager;
import com.codename1.io.Storage;
import com.codename1.io.Util;
import com.codename1.ui.Button;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.Display;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.Form;
import com.codename1.ui.Image;
import com.codename1.ui.Toolbar;
import com.codename1.ui.URLImage;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class PhotogalleryMobile {

	private Form current;
	private Resources theme;

	private Image photoImage;

	// spouští se pouze pøi novém startu, jednou za program
	public void init(Object context) {
		theme = UIManager.initFirstTheme("/theme");

		// Enable Toolbar on all Forms by default
		Toolbar.setGlobalToolbar(true);
	}

	private void showGalleryList(final Form listForm) {
		InfiniteProgress prog = new InfiniteProgress();
		ConnectionRequest galleryListRequest = new ConnectionRequest() {
			protected void readResponse(java.io.InputStream input) throws IOException {

				listForm.setTitle("Fotogalerie");

				JSONParser p = new JSONParser();
				Map<String, Object> result = p.parseJSON(new InputStreamReader(input, "UTF-8"));

				if (result != null && result.containsKey("root")) {

					final Container listCont = new Container(BoxLayout.y());
					listCont.setScrollableY(true);
					listForm.add(listCont);

					@SuppressWarnings("unchecked")
					ArrayList<Map<String, String>> list = (ArrayList<Map<String, String>>) result.get("root");
					for (Map<String, String> gallery : list) {
						String galleryNazev = gallery.get("name");
						int galleryId = (int) Double.parseDouble(String.valueOf(gallery.get("id")));
						Button button = new Button(galleryNazev);
						button.addActionListener(e -> {
							showGalleryDetail(listForm, listCont, galleryId, galleryNazev);
						});
						listCont.add(button);
					}
				}

			}
		};
		galleryListRequest.setUrl("http://localhost:8180/web/ws/pg/list");
		galleryListRequest.setPost(false);
		galleryListRequest.setDisposeOnCompletion(prog.showInifiniteBlocking());
		NetworkManager.getInstance().addToQueueAndWait(galleryListRequest);
	}

	private void showGalleryDetail(final Form listForm, final Component prevComponent, final int galleryId,
			final String galleryNazev) {
		InfiniteProgress prog = new InfiniteProgress();
		ConnectionRequest galleryRequest = new ConnectionRequest() {
			protected void readResponse(java.io.InputStream input) throws IOException {

				listForm.setTitle(galleryNazev);
				listForm.removeAll();

				JSONParser p = new JSONParser();
				Map<String, Object> result = p.parseJSON(new InputStreamReader(input, "UTF-8"));

				if (result != null) {

					final Container galleryCont = new Container(BoxLayout.y());
					galleryCont.setScrollableY(true);
					listForm.addComponent(galleryCont);

					galleryCont.addComponent(new SpanLabel((String) result.get("author")));

					@SuppressWarnings("unchecked")
					ArrayList<String> photos = (ArrayList<String>) result.get("files");
					for (String photo : photos) {
						InfiniteProgress prog2 = new InfiniteProgress();
						ConnectionRequest photoMiniRequest = new ConnectionRequest() {
							protected void readResponse(java.io.InputStream photoMiniInput) throws IOException {

								Image photoMiniImage = URLImage.createImage(photoMiniInput);
								Button photoMiniButton = new Button(photoMiniImage);
								galleryCont.add(photoMiniButton);

								photoMiniButton.addActionListener(e -> {
									showPhotoDetail(listForm, galleryCont, galleryId, photo);
								});

							}
						};
						photoMiniRequest.setUrl("http://localhost:8180/web/ws/pg/mini");
						photoMiniRequest.setPost(false);
						photoMiniRequest.addArgument("id", String.valueOf(galleryId));
						photoMiniRequest.addArgument("fileName", photo);
						photoMiniRequest.setDisposeOnCompletion(prog2.showInifiniteBlocking());
						NetworkManager.getInstance().addToQueue(photoMiniRequest);
					}

					Button zpetButton = new Button("Zpìt");
					zpetButton.addActionListener(e -> {
						listForm.setTitle("Fotogalerie");
						listForm.removeAll();
						listForm.add(prevComponent);
						listForm.repaint();
					});
					galleryCont.addComponent(zpetButton);
					listForm.repaint();
				}

			};
		};
		galleryRequest.setUrl("http://localhost:8180/web/ws/pg/gallery");
		galleryRequest.setPost(false);
		galleryRequest.addArgument("id", String.valueOf(galleryId));
		galleryRequest.setDisposeOnCompletion(prog.showInifiniteBlocking());
		NetworkManager.getInstance().addToQueueAndWait(galleryRequest);
	}

	private void showPhotoDetail(final Form listForm, final Component prevComponent, final int galleryId,
			String photo) {

		InfiniteProgress prog = new InfiniteProgress();
		ConnectionRequest photoDetailRequest = new ConnectionRequest() {
			protected void readResponse(java.io.InputStream input) throws IOException {

				photoImage = URLImage.createImage(input);

				listForm.setTitle(photo);
				listForm.removeAll();

				Container photoCont = new Container(BoxLayout.y());
				photoCont.setScrollableY(true);
				photoCont.setScrollableX(true);
				listForm.add(photoCont);

				// Zasekne celý prùbìh, pokud je photoImage "moc" velké
				// ImageViewer photoViewer = new ImageViewer(photoImage);
				// photoCont.add(photoViewer);

				photoCont.add(photoImage);

				Button zpetButton = new Button("Zpìt");
				zpetButton.addActionListener(e -> {
					listForm.setTitle("nazev");
					listForm.removeAll();
					listForm.add(prevComponent);
					listForm.repaint();
				});
				photoCont.addComponent(zpetButton);
			}
		};
		photoDetailRequest.setUrl("http://localhost:8180/web/ws/pg/photo");
		photoDetailRequest.setPost(false);
		photoDetailRequest.addArgument("id", String.valueOf(galleryId));
		photoDetailRequest.addArgument("fileName", photo);
		photoDetailRequest.setDisposeOnCompletion(prog.showInifiniteBlocking());
		NetworkManager.getInstance().addToQueue(photoDetailRequest);

	}

	// pøi nastartování nebo de-minimalizaci
	public void start() {
		if (current != null) {
			current.show();
			return;
		}
		Form listForm = new Form();
		showGalleryList(listForm);
		listForm.show();
	}

	// pøi minimalizaci
	public void stop() {
		current = Display.getInstance().getCurrent();
		if (current instanceof Dialog) {
			((Dialog) current).dispose();
			current = Display.getInstance().getCurrent();
		}
	}

	// pøi ukonèení aplikace
	public void destroy() {
	}
}
