package cz.gattserver.mobile.pg;

import com.codename1.ui.Button;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Image;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Map;

import com.codename1.components.ImageViewer;
import com.codename1.components.InfiniteProgress;
import com.codename1.components.SpanLabel;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.Log;
import com.codename1.io.NetworkManager;
import com.codename1.ui.Toolbar;
import com.codename1.ui.URLImage;
import com.codename1.ui.animations.MorphTransition;
import com.codename1.ui.geom.Dimension;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.util.StringUtil;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class PhotogalleryMobile {

	private Form current;
	private Resources theme;

	// spouští se pouze pøi novém startu, jednou za program
	public void init(Object context) {
		theme = UIManager.initFirstTheme("/theme");

		// Enable Toolbar on all Forms by default
		Toolbar.setGlobalToolbar(true);
	}

	// pøi nastartování nebo de-minimalizaci
	public void start() {
		if (current != null) {
			current.show();
			return;
		}
		Form listForm = new Form("Fotogalerie");
		Container listCont = new Container(BoxLayout.y());
		listCont.setScrollableY(true);
		listForm.add(listCont);

		final InfiniteProgress prog = new InfiniteProgress();

		try {
			ConnectionRequest crList = new ConnectionRequest();
			crList.setUrl("http://localhost:8180/web/ws/pg/list");
			crList.setPost(false);
			crList.setDisposeOnCompletion(prog.showInifiniteBlocking());
			NetworkManager.getInstance().addToQueueAndWait(crList);
			byte[] data = crList.getResponseData();
			JSONParser parser = new JSONParser();
			Map<String, Object> result = parser
					.parseJSON(new InputStreamReader(new ByteArrayInputStream(data), "UTF-8"));

			if (result != null && result.containsKey("root")) {
				@SuppressWarnings("unchecked")
				ArrayList<Map<String, String>> list = (ArrayList<Map<String, String>>) result.get("root");
				for (Map<String, String> gallery : list) {
					String nazev = gallery.get("name");
					Button button = new Button(nazev);
					button.addActionListener(e -> {

						ConnectionRequest galleryRequest = new ConnectionRequest() {
							protected void readResponse(java.io.InputStream input) throws IOException {
								JSONParser p = new JSONParser();
								Map<String, Object> result = p.parseJSON(new InputStreamReader(input, "UTF-8"));

								if (result != null) {
									Container galleryCont = new Container(BoxLayout.y());
									galleryCont.setScrollableY(true);
									listForm.setTitle(nazev);
									// detailCont.addComponent(new
									// SpanLabel((String)
									// result.get("creationDate")));
									galleryCont.addComponent(new SpanLabel((String) result.get("author")));

									ArrayList<String> photos = (ArrayList<String>) result.get("files");
									for (String photo : photos) {
										ConnectionRequest photoMiniRequest = new ConnectionRequest() {
											protected void readResponse(java.io.InputStream photoMiniInput)
													throws IOException {
												Image photoMiniImage = URLImage.createImage(photoMiniInput);
												Button photoMiniButton = new Button(photoMiniImage);
												galleryCont.add(photoMiniButton);

												photoMiniButton.addActionListener(e -> {

													ConnectionRequest photoRequest = new ConnectionRequest() {
														protected void readResponse(java.io.InputStream photoInput)
																throws IOException {

															listForm.setTitle(photo);

															Container photoCont = new Container(BoxLayout.y());
															photoCont.setScrollableY(true);
															Image photoImage = URLImage.createImage(photoInput);
															ImageViewer photoViewer = new ImageViewer(photoImage);
															photoCont.add(photoViewer);
															// photoCont.add(photoImage);

															Button zpetButton = new Button("Zpìt");
															zpetButton.addActionListener(e -> {
																listForm.setTitle("nazev");
																listForm.removeAll();
																listForm.add(galleryCont);
																listForm.repaint();
															});
															photoCont.addComponent(zpetButton);
															listForm.removeAll();
															listForm.add(photoCont);
															listForm.repaint();

														};
													};
													photoRequest.setUrl("http://localhost:8180/web/ws/pg/photo");
													photoRequest.setPost(false);
													photoRequest.addArgument("id", String.valueOf((int) Double
															.parseDouble(String.valueOf(gallery.get("id")))));
													photoRequest.addArgument("fileName", photo);
													NetworkManager.getInstance().addToQueue(photoRequest);
												});

											}
										};
										photoMiniRequest.setUrl("http://localhost:8180/web/ws/pg/mini");
										photoMiniRequest.setPost(false);
										photoMiniRequest.addArgument("id", String
												.valueOf((int) Double.parseDouble(String.valueOf(gallery.get("id")))));
										photoMiniRequest.addArgument("fileName", photo);
										NetworkManager.getInstance().addToQueue(photoMiniRequest);
									}

									Button zpetButton = new Button("Zpìt");
									zpetButton.addActionListener(e -> {
										listForm.setTitle("Fotogalerie");
										listForm.removeAll();
										listForm.add(listCont);
										listForm.repaint();
									});
									galleryCont.addComponent(zpetButton);
									listForm.removeAll();
									listForm.add(galleryCont);
									listForm.repaint();
								}

							};
						};
						galleryRequest.setUrl("http://localhost:8180/web/ws/pg/gallery");
						galleryRequest.setPost(false);
						// TODO z RESTu pøijde 3, JSONParser z toho udìlá
						// 3.0 a rovnou Double
						galleryRequest.addArgument("id",
								String.valueOf((int) Double.parseDouble(String.valueOf(gallery.get("id")))));
						NetworkManager.getInstance().addToQueueAndWait(galleryRequest);
					});
					listCont.add(button);
				}
			}
		} catch (IOException e) {
			// TODO
		}

		listForm.show();

	}

	// pøi minimalizaci
	public void stop() {
		current = Display.getInstance().getCurrent();
		if (current instanceof Dialog) {
			((Dialog) current).dispose();
			current = Display.getInstance().getCurrent();
		}
	}

	// pøi ukonèení aplikace
	public void destroy() {
	}
}
